---
- name: sync clock
  hosts: all
  become: yes
  roles:
    - name: chrony

- name: create drbd cluster
  hosts: grafana_servers
  become: yes
  roles:
    - name: drbd
      vars:
        drbd_servers_group_name: grafana_servers
        drbd_resources_conf:
          - name: drbd1
            meta-disk: internal
            device: /dev/drbd1
            disk: /dev/sdb1
            options:
              auto-promote: 'no'
            net:
              verify-alg: sha256
            'on':
              - name: grafana1.cluster.local
                node-id: 0
                address: 192.168.1.90:7788
              - name: grafana2.cluster.local
                node-id: 1
                address: 192.168.1.91:7788
            connection-mesh:
              hosts: grafana1.cluster.local grafana2.cluster.local
  post_tasks:
    - name: create grafana user group
      group:
        name: grafana
        state: present

    - name: create grafana user
      user:
        name: grafana
        group: grafana
        shell: /sbin/nologin

    - name: create grafana mount point
      file:
        path: /var/lib/grafana
        state: directory
        owner: grafana
        group: grafana
        mode: 0755

    - name: get drbd role
      shell: /sbin/drbdadm drbdadm role drbd1
      register: role
      changed_when: false

    - block:
        - name: format drbd1 device
          filesystem:
            fstype: xfs
            dev: /dev/drbd1

        - name: mount drbd1 to grafana mount point
          mount:
            path: /var/lib/grafana
            src: /dev/drbd1
            fstype: xfs
            state: mounted
      when: role.stdout == 'Primary'

    - name: create drbd before demote script
      copy:
        content: |
          /sbin/pidof grafana-server
          if [ $? -eq 0 ]; then
              /bin/systemctl stop grafana-server
          fi
        dest: /etc/drbd.d/scripts/pre_demote.sh
        owner: root
        group: root
        mode: 0744

    - name: create drbd after demote script
      copy:
        content: |
          /sbin/pidof grafana-server
          if [ $? -ne 0 ]; then
              /bin/systemctl start grafana-server
          fi
        dest: /etc/drbd.d/scripts/post_demote.sh
        owner: root
        group: root
        mode: 0744

    - name: create drbd after promote script
      copy:
        content: |
          /bin/mount | grep -w drbd1
          if [ $? -ne 0 ]; then 
              /bin/mount /dev/drbd1 /var/lib/grafana
          fi

          /bin/systemctl restart grafana-server
        dest: /etc/drbd.d/scripts/post_promote.sh
        owner: root
        group: root
        mode: 0744

- name: create grafana cluster
  hosts: grafana_servers
  become: yes
  roles:
    - name: grafana
      vars:
        grafana_configs:
          security:
            admin_user: grafana_admin
            admin_password: MyPassword

- name: install keepalived
  hosts: grafana_servers
  become: yes
  roles:
    - name: keepalived
      vars:
        keepalived_configs:
          global_defs:
            notification_email:
              - email@example.com
            notification_email_from: email@example.com
            smtp_server: 127.0.0.1
            smtp_connect_timeout: 15
          vrrp_script:
            - name: chk_grafana
              script: "{{ keepalived_config_path }}/scripts/chk_grafana.sh"
              interval: 2
              weight: 2
          vrrp_instance:
            - name: Grafana_HA
              interface: |-
                {%- for key, value in ansible_facts.items() if
                  value.ipv4.network is defined and
                  value.ipv4.network == '192.168.1.0' -%}
                {{- key -}}
                {%- endfor -%}
              state: >-
                {{- 'MASTER' if groups.grafana_servers|
                first == inventory_hostname else 'BACKUP' -}}
              priority: >-
                {%- for hostname in groups.grafana_servers|reverse -%}
                  {%- if hostname == inventory_hostname -%}
                    {{- loop.index -}}
                  {%- endif -%}
                {%- endfor -%}
              virtual_router_id: 2
              smtp_alert:
              authentication:
                auth_type: PASS
                auth_pass: mypassword
              unicast_src_ip: >-
                {%- for key, value in ansible_facts.items() if
                  value.ipv4.network is defined and
                  value.ipv4.network == '192.168.1.0' -%}
                {{- value.ipv4.address -}}
                {%- endfor -%}
              unicast_peer: >-
                {%- set servers = [] -%}
                {%- for hostname in groups.grafana_servers if
                  hostname != inventory_hostname -%}
                  {%- for key, value in hostvars[hostname].ansible_facts.items() if
                    value.ipv4.network is defined and
                    value.ipv4.network == '192.168.1.0' -%}
                    {{- servers.append(value.ipv4.address) -}}
                  {%- endfor -%}
                {%- endfor -%}
                {{- servers -}}
              virtual_ipaddress:
                - 192.168.1.200
              track_script:
                - chk_grafana
              notify_master: /etc/drbd.d/scripts/promote_to_primary.sh
              notify_backup: /etc/drbd.d/scripts/demote_to_secondary.sh
  post_tasks:
    - name: create grafana check script
      copy:
        content: |-
          #!/bin/bash

          stat_code=$(curl -o /dev/null -s -w "%{http_code}\n" \
              http://localhost:3000/api/health)

          if [ $stat_code -eq 200 ]; then
              exit 0
          else
              exit 1
          fi
        dest: "{{ keepalived_config_path }}/scripts/chk_grafana.sh"
        owner: root
        group: root
        mode: 0744
      notify: reload keepalived
