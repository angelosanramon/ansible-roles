- name: set acl policy command options
  set_fact:
    description_option: >-
      {%- if acl_policy.description|default(none, true) is not none -%}
      -description='{{ acl_policy.description }}'
      {%- endif -%}
    from_token_option: >-
      {%- if acl_policy.from_token|default(none, true) is not none -%}
      -from-token='{{ acl_policy.from_token }}'
      {%- endif -%}
    token_secret_option: >-
      {%- if acl_policy.token_secret|default(none, true) is not none -%}
      -token-secret='{{ acl_policy.token_secret }}'
      {%- endif -%}
    meta_option: >-
      {%- if acl_policy.meta|default(false, true) == true -%}
      -meta
      {%- endif -%}
    name_option: >-
      {%- if acl_policy.name|default(none, true) is not none -%}
      -name='{{ acl_policy.name }}'
      {%- endif -%}
    rule_option: |-
      {% for rule in acl_policy.rules if (acl_policy.rules is defined and
        acl_policy.rules is not none) %}
      {% if rule.resource == 'keyring' or 
        rule.resource == 'operator' or 
        rule.resource == 'acl' %}
      {{ rule.resource }} = "{{ rule.policy }}"
      {% else %}
      {{ rule.resource }} "{{ rule.segment }}" {
        policy = "{{ rule.policy }}"
      }
      {%- endif -%}
      {% endfor %}
    datacenters_option: >-
      {%- if acl_policy.datacenters|default([], true)|length > 0 -%}
      -valid-datacenter='{{ acl_policy.datacenters|
        join("' -valid-datacenter='") }}'
      {%- endif -%}
    format_option: >-
      {%- if acl_role.format|default(none, true) is not none -%}
      -format='{{ acl_role.format }}'
      {%- endif -%}
    namespace_option: >-
      {%- if acl_role.namespace|default(none, true) is not none -%}
      -namespace='{{ acl_role.namespace }}'
      {%- endif -%}
  no_log: true

- name: get existing policies
  shell: >
    {{ consul_bin_path }}/consul acl policy list
    -token={{ acl_master_token }}
    -format=json
  register: policy_check_result
  changed_when: false

- name: save existing policies to list
  set_fact:
    existing_policies: >-
      {% set policies = policy_check_result.stdout|from_json|
        json_query('[*].Name') %}
      {{ policies is none | ternary([], policies) }}

- name: create acl policy
  shell: >
    {{ consul_bin_path }}/consul acl policy create
    -token='{{ acl_master_token }}'
    -rules='{{ rule_option|default('', true) }}'
    {{ description_option}}
    {{ from_token_option }}
    {{ token_secret_option }}
    {{ meta_option }}
    {{ name_option }}
    {{ datacenters_option }}
    {{ format_option }}
    {{ namespace_option }}
  register: policy_create_result
  when: acl_policy.name not in existing_policies
  no_log: true

- name: update policy if already exist
  block:
    - name: get current policy information
      shell: >
        {{ consul_bin_path }}/consul acl policy read
        -name={{ acl_policy.name }}
        -token={{ acl_master_token }}
        -format=json
      register: acl_policy_read
      changed_when: false

    - name: save current policy information
      set_fact:
        current_policy_name: >-
          {{ acl_policy_read.stdout|from_json|json_query('Name') }}
        current_policy_description: >-
          {{ acl_policy_read.stdout|from_json|json_query('Description') }}
        current_policy_rules: >-
          {{ acl_policy_read.stdout|from_json|json_query('Rules') }}
        current_policy_datacenters: >-
          {%- set dcs = acl_policy_read.stdout|from_json|
            json_query('Datacenters') -%}
          {{ dcs is none | ternary([], dcs) }}

    - name: update acl policy
      shell: >
        {{ consul_bin_path }}/consul acl policy update
        -token='{{ acl_master_token }}'
        -no-merge
        -rules='{{ rule_option|default('', true) }}'
        {{ name_option }}
        {{ description_option }}
        {{ datacenters_option }}
      when: current_policy_name != acl_policy.name or
            current_policy_description != acl_policy.description|
              default(none, true) or
            current_policy_rules != rule_option|default(none, true) or
            current_policy_datacenters|symmetric_difference(
              acl_policy.datacenters|default([], true))|length != 0
      no_log: true
  when: acl_policy.name in existing_policies
