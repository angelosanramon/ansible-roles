- set_fact:
    unseal_keys: '{{ vault_unseal_keys|default([], true) }}'
    num_unseal_keys: '{{ vault_unseal_keys|default([], true)|length }}'

- name: check if vault server is sealed
  uri:
    url: >-
      http://127.0.0.1:{{ vault_port }}/v1/sys/seal-status
  register: vault_seal_check

- block:
    - name: check if unseal keys file exist
      stat:
        path: '{{ vault_data_path }}/.vault_unseal_keys'
      register: unseal_keys_file

    - block:
        - name: load unseal keys from file
          slurp:
            src: '{{ vault_data_path }}/.vault_unseal_keys'
          register: source_unseal_keys_file_content
          no_log: true

        - set_fact:
            unseal_keys: "{{ (source_unseal_keys_file_content.content|
          b64decode).split('\n') }}"
      when: unseal_keys_file.stat.exists

    - include_tasks: copyfrom_unseal_keys.yml
      with_items: >-
        {{ groups[vault_servers_group_name]|
          reject('search', inventory_hostname)|list }}
      loop_control:
        loop_var: src_host
      when:
        - not unseal_keys_file.stat.exists
        - num_unseal_keys|int < vault_initialization_options.secret_threshold

    - name: unseal vault server
      uri:
        url: >-
          http://127.0.0.1:{{ vault_port }}/v1/sys/unseal
        method: PUT
        body_format: json
        body: '{ "key": "{{ item }}" }'
      with_items: >-
        {{ unseal_keys[:vault_initialization_options.secret_threshold] }}
      register: unseal_vault_result
      no_log: true
  when: vault_seal_check.json.sealed

- name: wait until unsealed
  uri:
    url: >-
      http://127.0.0.1:{{ vault_port }}/v1/sys/seal-status
  register: seal_check
  until: not seal_check.json.sealed
  retries: 5
  delay: 10

