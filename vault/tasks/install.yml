- name: create vault user group
  group:
    name: '{{ vault_group }}'
    state: present

- name: create vault user
  user:
    name: '{{ vault_user }}'
    comment: Vault user
    group: '{{ vault_group }}'
    shell: /bin/false

- name: create directories
  block:
    - name: create binary directory
      file:
        path: '{{ vault_bin_path }}'
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: create data, configuration, and certificates, and plugins directories
      file:
        path: '{{ item }}'
        state: directory
        owner: '{{ vault_user }}'
        group: '{{ vault_group }}'
        mode: 0700
      with_items:
        - '{{ vault_config_path }}'
        - '{{ vault_data_path }}'
        - '{{ vault_certs_path }}'
        - '{{ vault_plugin_path }}'

    - name: create log and run directories
      file:
        path: '{{ item }}'
        state: directory
        owner: '{{ vault_user }}'
        group: '{{ vault_group }}'
        mode: 0750
      with_items:
        - '{{ vault_run_path }}'

- name: download vault
  get_url:
    url: '{{ vault_zip_url }}'
    dest: '{{ vault_bin_path }}'
    checksum: 'sha256:{{ vault_zip_checksum }}'

- name: install vault
  unarchive:
    src: "{{ vault_bin_path }}/{{ (vault_zip_url | urlsplit('path')).split('/')[-1] }}"
    dest: '{{ vault_bin_path }}'
    remote_src: yes
    validate_certs: no

- name: create vault systemd file
  template:
    src: vault_systemd.service.j2
    dest: /etc/systemd/system/vault.service
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd
    - restart vault

- name: create vault config file
  template:
    src: vault_config.hcl.j2
    dest: '{{ vault_config_path }}/{{ vault_config_file }}'
    owner: '{{ vault_user }}'
    group: '{{ vault_group }}'
    mode: 0640
  notify: restart vault
