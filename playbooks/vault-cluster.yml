---
- name: setup vault cluster
  hosts: vault_servers
  become: yes
  roles:
    - name: ntp
    - name: firewalld
      vars:
        firewalld_ports:
          - 8200/tcp
          - 8201/tcp
    - name: logrotate
      vars:
        logrotate_config_options:
          - name: vault
            paths:
              - "{{ vault_log_path }}/*.log"
            options:
              - daily
              - missingok
              - rotate 7
              - dateext
              - copytruncate
              - |-
                postrotate
                    /usr/bin/systemctl reload vault
                endscript
    - name: vault
      vars:
        vault_config_options:
          ui: true
          listener:
            - tcp:
                address: "{{ ansible_host}}:{{ vault_port }}"
                cluster_address: "{{ ansible_host }}:{{ vault_cluster_port }}"
                tls_disable: true
          storage:
            raft:
              path: "{{ vault_data_path }}"
              node_id: "{{ ansible_hostname }}"
              retry_join: >-
                {%- set peers = [] -%}
                {%- for hostname in groups[vault_servers_group_name] if 
                  hostname != inventory_hostname -%}
                  {{- peers.append({"leader_api_addr": 'http://' + 
                  hostvars[hostname].ansible_host + ':' + vault_port|string}) 
                  -}}
                {%- endfor -%}
                {{- peers -}}
          api_addr: http://{{ ansible_host}}:{{ vault_port }}
          cluster_addr: "http://{{ ansible_host }}:{{ vault_cluster_port }}"
          log_level: info
          log_format: standard
          pid_file: "{{ vault_run_path }}/vault.pid"
          disable_mlock: true
        vault_swap_off: true
        vault_policies:
          - name: vault_admin
            policy: |-
              path "sys/health"
              {
                capabilities = ["read", "sudo"]
              }

              path "sys/policies/acl"
              {
                capabilities = ["list"]
              }

              path "sys/policies/acl/*"
              {
                capabilities = ["create", "read", "update", "delete", "list", "sudo"]
              }

              path "auth/*"
              {
                capabilities = ["create", "read", "update", "delete", "list", "sudo"]
              }

              path "sys/auth/*"
              {
                capabilities = ["create", "update", "delete", "sudo"]
              }

              path "sys/auth"
              {
                capabilities = ["read"]
              }

              path "secret/*"
              {
                capabilities = ["create", "read", "update", "delete", "list", "sudo"]
              }

              path "sys/mounts/*"
              {
                capabilities = ["create", "read", "update", "delete", "list", "sudo"]
              }

              path "sys/mounts"
              {
                capabilities = ["read"]
              }

              path "kv/*"
              {
                capabilities = ["create", "read", "update", "delete", "list", "sudo"]
              }

              path "sys/storage/*"
              {
                capabilities = ["create", "read", "update", "delete", "list", "sudo"]
              }
        vault_userpass_users:
          - username: vault_admin
            password: mypassword
            token_policies:
              - vault_admin

- name: setup haproxy cluster for vault
  hosts: haproxy_servers
  become: yes
  pre_tasks:
    - name: allow binding of non-existing ip address
      include_role:
        name: keepalived
        tasks_from: sysctl
  roles:
    - name: ntp
    - name: firewalld
      vars:
        firewalld_ports:
          - 8404/tcp
          - 8200/tcp
        firewalld_rich_rules:
          - rule protocol value='vrrp' accept
    - name: logrotate
      vars:
        logrotate_config_options:
          - name: haproxy
            paths:
              - /var/log/haproxy/*.log
            options:
              - daily
              - missingok
              - rotate 7
              - dateext
              - copytruncate
              - |-
                postrotate
                    /usr/bin/systemctl reload haproxy
                endscript
          - name: keepalived
            paths:
              - /var/log/keepalived/*.log
            options:
              - daily
              - missingok
              - rotate 7
              - dateext
              - copytruncate
              - |-
                postrotate
                    /usr/bin/systemctl reload keepalived
                endscript
    - name: haproxy
      vars:
        haproxy_defaults_config:
          timeout:
            - connect 10s
            - client 30s
            - server 30s
          log: global
          mode: http
          option: httplog
        haproxy_frontends_config:
          vault.cluster.local:
            bind: 192.168.3.100:8200
            acl:
              - header_host_hostname hdr(host) -i -m beg vault.example.com
              - header_host_ip hdr(host) -i -m beg 192.168.3.100
            use_backend: >-
              vault_servers if header_host_hostname || header_host_ip
        haproxy_backends_config:
          vault_servers:
            balance: roundrobin
            option: httpchk GET /v1/sys/health
            http-check: expect status 200,429
            default-server: check inter 10s
            server: >-
              {%- set servers = [] -%}
              {%- for hostname in groups.vault_servers -%}
              {{ servers.append(hostname + ' ' +
                hostvars[hostname].ansible_host + ':' + '8200') }}
              {%- endfor -%}
              {{ servers }}
    - name: keepalived
      vars:
        keepalived_vip: 192.168.3.100
        keepalived_network: >-
          {{ keepalived_vip.split('.')[:-1]|join('.') + '.0' }}
        keepalived_configs:
          global_defs:
            script_user: root root
            enable_script_security:
            notification_email:
              - email@example.com
          vrrp_script:
            - name: chk_haproxy
              script: "'/usr/sbin/pidof haproxy'"
              interval: 5
              weight: 2
          vrrp_instance:
            - name: HAPROXY_LB
              interface: |-
                {%- for key, value in ansible_facts.items() if 
                  value.ipv4.network is defined and 
                  value.ipv4.network == keepalived_network -%}
                {{- key -}}
                {%- endfor -%}
              state: >-
                {{- 'MASTER' if groups.haproxy_servers|first == 
                inventory_hostname else 'BACKUP' -}}
              priority: >-
                {%- for hostname in groups.haproxy_servers|reverse -%}
                  {%- if hostname == inventory_hostname -%}
                    {{- loop.index -}}
                  {%- endif -%}
                {%- endfor -%}
              virtual_router_id: 1
              smtp_alert:
              authentication:
                auth_type: PASS
                auth_pass: mypassword
              unicast_src_ip: >-
                {%- for key, value in ansible_facts.items() if 
                  value.ipv4.network is defined and 
                  value.ipv4.network == keepalived_network -%}
                {{- value.ipv4.address -}}
                {%- endfor -%}
              unicast_peer: >-
                {%- set servers = [] -%}
                {%- for hostname in groups.haproxy_servers if 
                  hostname != inventory_hostname -%}
                  {%- for key, value in hostvars[hostname].ansible_facts.items() if
                    value.ipv4.network is defined and 
                    value.ipv4.network == keepalived_network -%}
                    {{- servers.append(value.ipv4.address) -}}
                  {%- endfor -%}
                {%- endfor -%}
                {{- servers -}}
              virtual_ipaddress:
                - "{{ keepalived_vip }}"
              track_script:
                - chk_haproxy
